"""
Django settings for firetower project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import sentry_sdk


def env_is_dev() -> bool:
    return os.environ.get("DJANGO_ENV", "dev") == "dev"


def dev_default(key: str, default: str = "") -> str:
    value = os.environ.get(key)
    if value is not None and value != "":
        return value
    if env_is_dev():
        return default
    raise Exception(
        f"ERROR: Environment variable {key} must be set when not in the dev environment!"
    )


sentry_sdk.init(
    dsn="https://ef9a24c7ef0f1a8ba7e8f821d6ab1dd9@o1.ingest.us.sentry.io/4510076289548288",
    send_default_pii=False,
    environment=os.environ.get("DJANGO_ENV", "dev"),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Global project settings
PROJECT_KEY = os.environ.get("PROJECT_KEY", "INC")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = dev_default(
    "DJANGO_SECRET_KEY",
    "django-insecure-gmj)qc*_dk&^i1=z7oy(ew7%5*fz^yowp8=4=0882_d=i3hl69",
)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_is_dev()

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "::1",
    "firetower.getsentry.net",
    "test.firetower.getsentry.net",
    "firetower",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]

CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "firetower.auth",
    "firetower.incidents",
    "firetower.integrations",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "firetower.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "firetower.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": dev_default("DJANGO_PG_DB", "firetower"),
        "HOST": dev_default("DJANGO_PG_HOST", "localhost"),
        "USER": dev_default("DJANGO_PG_USER", "postgres"),
        "PASSWORD": dev_default("DJANGO_PG_PASS", "dummy_dev_password"),
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Jira Integration Configuration
# Defaults to test environment setup (matching opsbot test config)
JIRA = {
    "DOMAIN": os.environ.get("JIRA_DOMAIN", "https://getsentry.atlassian.net"),
    "ACCOUNT": dev_default("JIRA_ACCOUNT"),
    "API_KEY": dev_default("JIRA_API_KEY"),
    "SEVERITY_FIELD": dev_default("JIRA_SEVERITY_FIELD", "customfield_11023"),
}

# Slack Integration Configuration
SLACK = {
    "BOT_TOKEN": dev_default("SLACK_BOT_TOKEN"),
    "TEAM_ID": os.environ.get("SLACK_TEAM_ID", "sentry"),
}

# Django REST Framework Configuration
REST_FRAMEWORK = {
    # Pagination
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
    # Authentication
    "DEFAULT_PERMISSION_CLASSES": [
        "firetower.incidents.permissions.IsAuthenticated",
    ],
}

# Logging Configuration
if not env_is_dev():
    import google.cloud.logging

    client = google.cloud.logging.Client()
    client.setup_logging()
